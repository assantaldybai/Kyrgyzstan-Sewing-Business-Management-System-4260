import React, { useState } from 'react';
import { motion } from 'framer-motion';
import SafeIcon from '../../../common/SafeIcon';
import * as FiIcons from 'react-icons/fi';

const { FiHeart, FiUser, FiTag, FiHash, FiArrowRight, FiArrowLeft } = FiIcons;

const FirstClientStep = ({ data, onNext, onBack }) => {
  const [formData, setFormData] = useState({
    name: data.client?.name || '',
    productName: data.client?.productName || '',
    articleNumber: data.client?.articleNumber || ''
  });

  const [errors, setErrors] = useState({});

  const handleSubmit = (e) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const newErrors = {};
    if (!formData.name.trim()) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (!formData.productName.trim()) {
      newErrors.productName = '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (!formData.articleNumber.trim()) {
      newErrors.articleNumber = '–ê—Ä—Ç–∏–∫—É–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }
    
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    onNext({ client: formData });
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: null }));
    }
  };

  const exampleClients = [
    '–ë—É—Ç–∏–∫ "–ú–æ–¥–Ω–∏—Ü–∞"',
    '–¢–¶ "–ê–ª–∞-–ê—Ä—á–∞"',
    '–ú–∞–≥–∞–∑–∏–Ω "–°—Ç–∏–ª—å"',
    '–ò–ü –ê—Å–∞–Ω–æ–≤–∞ –ê.–ö.'
  ];

  const exampleProducts = [
    '–ü–ª–∞—Ç—å–µ "–í–µ—Å–Ω–∞"',
    '–•—É–¥–∏ –æ–≤–µ—Ä—Å–∞–π–∑',
    '–§—É—Ç–±–æ–ª–∫–∞ –∫–ª–∞—Å—Å–∏–∫',
    '–ë—Ä—é–∫–∏ –æ—Ñ–∏—Å–Ω—ã–µ'
  ];

  return (
    <div>
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8"
      >
        <div className="w-16 h-16 bg-pink-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <SafeIcon icon={FiHeart} className="w-8 h-8 text-pink-600" />
        </div>
        
        <h2 className="text-2xl font-bold text-gray-900 mb-3">
          –í–∞—à –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑—á–∏–∫ –∏ –∏–∑–¥–µ–ª–∏–µ
        </h2>
        
        <p className="text-gray-600 max-w-md mx-auto">
          –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –æ—Å–Ω–æ–≤—É –¥–ª—è –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –≤—ã —É–≤–∏–¥–µ–ª–∏, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞.
        </p>
      </motion.div>

      {/* Form */}
      <motion.form
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        onSubmit={handleSubmit}
        className="space-y-6"
      >
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ *
          </label>
          <div className="relative">
            <SafeIcon icon={FiUser} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleChange('name', e.target.value)}
              className={`w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                errors.name ? 'border-red-300' : 'border-gray-300'
              }`}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë—É—Ç–∏–∫ '–ú–æ–¥–Ω–∏—Ü–∞'"
            />
          </div>
          {errors.name && (
            <p className="text-red-500 text-sm mt-1">{errors.name}</p>
          )}
          
          <div className="mt-2 flex flex-wrap gap-2">
            {exampleClients.map((example) => (
              <button
                key={example}
                type="button"
                onClick={() => handleChange('name', example)}
                className="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition-colors"
              >
                {example}
              </button>
            ))}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è *
          </label>
          <div className="relative">
            <SafeIcon icon={FiTag} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              value={formData.productName}
              onChange={(e) => handleChange('productName', e.target.value)}
              className={`w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                errors.productName ? 'border-red-300' : 'border-gray-300'
              }`}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–ª–∞—Ç—å–µ '–í–µ—Å–Ω–∞'"
            />
          </div>
          {errors.productName && (
            <p className="text-red-500 text-sm mt-1">{errors.productName}</p>
          )}
          
          <div className="mt-2 flex flex-wrap gap-2">
            {exampleProducts.map((example) => (
              <button
                key={example}
                type="button"
                onClick={() => handleChange('productName', example)}
                className="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition-colors"
              >
                {example}
              </button>
            ))}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ê—Ä—Ç–∏–∫—É–ª –∏–∑–¥–µ–ª–∏—è *
          </label>
          <div className="relative">
            <SafeIcon icon={FiHash} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              value={formData.articleNumber}
              onChange={(e) => handleChange('articleNumber', e.target.value)}
              className={`w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                errors.articleNumber ? 'border-red-300' : 'border-gray-300'
              }`}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: PL-01"
            />
          </div>
          {errors.articleNumber && (
            <p className="text-red-500 text-sm mt-1">{errors.articleNumber}</p>
          )}
          <p className="text-sm text-gray-500 mt-1">
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–¥–µ–ª–∏—è
          </p>
        </div>

        {/* Info Box */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="font-medium text-blue-900 mb-2">üéØ –ß—Ç–æ –¥–∞–ª—å—à–µ?</h4>
          <p className="text-sm text-blue-700 mb-2">
            –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
          </p>
          <ul className="text-sm text-blue-700 space-y-1">
            <li>‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞</li>
            <li>‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É –¥–ª—è –∏–∑–¥–µ–ª–∏—è</li>
            <li>‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å</li>
            <li>‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ñ–∏–Ω–∞–Ω—Å—ã</li>
          </ul>
        </div>

        {/* Navigation */}
        <div className="flex justify-between pt-6">
          <button
            type="button"
            onClick={onBack}
            className="px-6 py-3 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors flex items-center"
          >
            <SafeIcon icon={FiArrowLeft} className="w-4 h-4 mr-2" />
            –ù–∞–∑–∞–¥
          </button>
          
          <button
            type="submit"
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center"
          >
            –î–∞–ª–µ–µ
            <SafeIcon icon={FiArrowRight} className="w-4 h-4 ml-2" />
          </button>
        </div>
      </motion.form>
    </div>
  );
};

export default FirstClientStep;