import React from 'react';
import { useForm } from 'react-hook-form';
import { motion } from 'framer-motion';
import { useFactory } from '../../contexts/FactoryContext';
import { useTask } from '../../contexts/TaskContext';
import SafeIcon from '../../common/SafeIcon';
import * as FiIcons from 'react-icons/fi';

const { FiX, FiPlus } = FiIcons;

const QuickOrderForm = ({ onClose, onSuccess }) => {
  const { addOrder, materials } = useFactory();
  const { generateOrderTasks } = useTask();
  
  const { register, handleSubmit, formState: { errors } } = useForm({
    defaultValues: {
      customerName: '',
      model: '',
      color: '',
      quantity: 1,
      pricePerUnit: 0,
      deliveryDate: '',
      advancePayment: 0,
      fabricConsumption: 1.2 // –º–µ—Ç—Ä–æ–≤ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É
    }
  });

  const onSubmit = (data) => {
    try {
      // Create order with task generation callback
      const orderId = addOrder({
        customerName: data.customerName,
        model: data.model,
        color: data.color,
        quantity: parseInt(data.quantity),
        pricePerUnit: parseFloat(data.pricePerUnit),
        deliveryDate: data.deliveryDate,
        advancePayment: parseFloat(data.advancePayment || 0),
        fabricConsumption: parseFloat(data.fabricConsumption)
      }, generateOrderTasks); // Pass task generator as callback

      console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∑–∞–¥–∞—á:', orderId);
      
      onSuccess?.();
      onClose();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    }
  };

  // Check material availability
  const fabricMaterial = materials.find(m => m.type === 'fabric');
  const accessoryMaterial = materials.find(m => m.type === 'accessories');

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
    >
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        className="bg-white rounded-xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto p-6"
      >
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-semibold text-gray-900">
            –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
          </h2>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <SafeIcon icon={FiX} className="w-6 h-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* Customer and Model */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ó–∞–∫–∞–∑—á–∏–∫ *
              </label>
              <input
                {...register('customerName', { required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –§–ò–û"
              />
              {errors.customerName && (
                <p className="text-red-500 text-sm mt-1">{errors.customerName.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ú–æ–¥–µ–ª—å *
              </label>
              <input
                {...register('model', { required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ñ–µ–Ω—Å–∫–æ–µ –ø–ª–∞—Ç—å–µ –æ—Ñ–∏—Å–Ω–æ–µ"
              />
              {errors.model && (
                <p className="text-red-500 text-sm mt-1">{errors.model.message}</p>
              )}
            </div>
          </div>

          {/* Color and Quantity */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –¶–≤–µ—Ç *
              </label>
              <input
                {...register('color', { required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∏–Ω–∏–π"
              />
              {errors.color && (
                <p className="text-red-500 text-sm mt-1">{errors.color.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *
              </label>
              <input
                {...register('quantity', { 
                  required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ',
                  min: { value: 1, message: '–ú–∏–Ω–∏–º—É–º 1' }
                })}
                type="number"
                min="1"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              {errors.quantity && (
                <p className="text-red-500 text-sm mt-1">{errors.quantity.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (—Å–æ–º) *
              </label>
              <input
                {...register('pricePerUnit', { 
                  required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ',
                  min: { value: 0, message: '–ú–∏–Ω–∏–º—É–º 0' }
                })}
                type="number"
                step="0.01"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              {errors.pricePerUnit && (
                <p className="text-red-500 text-sm mt-1">{errors.pricePerUnit.message}</p>
              )}
            </div>
          </div>

          {/* Delivery and Payment */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ *
              </label>
              <input
                {...register('deliveryDate', { required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' })}
                type="date"
                min={new Date().toISOString().split('T')[0]}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              {errors.deliveryDate && (
                <p className="text-red-500 text-sm mt-1">{errors.deliveryDate.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (—Å–æ–º)
              </label>
              <input
                {...register('advancePayment', { min: { value: 0, message: '–ú–∏–Ω–∏–º—É–º 0' } })}
                type="number"
                step="0.01"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="0"
              />
              {errors.advancePayment && (
                <p className="text-red-500 text-sm mt-1">{errors.advancePayment.message}</p>
              )}
            </div>
          </div>

          {/* Fabric Consumption */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –†–∞—Å—Ö–æ–¥ —Ç–∫–∞–Ω–∏ (–º–µ—Ç—Ä–æ–≤ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É) *
            </label>
            <input
              {...register('fabricConsumption', { 
                required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ',
                min: { value: 0.1, message: '–ú–∏–Ω–∏–º—É–º 0.1' }
              })}
              type="number"
              step="0.1"
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            {errors.fabricConsumption && (
              <p className="text-red-500 text-sm mt-1">{errors.fabricConsumption.message}</p>
            )}
          </div>

          {/* Auto-Task Generation Info */}
          <div className="bg-blue-50 rounded-lg p-4">
            <h3 className="font-medium text-blue-900 mb-2">ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á</h3>
            <p className="text-sm text-blue-700 mb-3">
              –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á:
            </p>
            <div className="space-y-1 text-sm text-blue-600">
              <p>1. üë®‚Äçüíº <strong>–¢–µ—Ö–Ω–æ–ª–æ–≥—É:</strong> –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–ø—Ä–æ—Ü–µ—Å—Å–∞</p>
              <p>2. üì¶ <strong>–°–Ω–∞–±–∂–µ–Ω–∏–µ:</strong> –ó–∞–∫—É–ø–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</p>
              <p>3. ‚úÇÔ∏è <strong>–ö—Ä–æ–π—â–∏–∫—É:</strong> –†–∞—Å–∫—Ä–æ–π –∏–∑–¥–µ–ª–∏–π</p>
              <p>4. üë• <strong>–ë—Ä–∏–≥–∞–¥–∏—Ä—É:</strong> –ü–æ—à–∏–≤</p>
              <p>5. ‚úÖ <strong>–û–¢–ö:</strong> –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</p>
              <p>6. üë®‚Äçüíº <strong>–¢–µ—Ö–Ω–æ–ª–æ–≥—É:</strong> –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</p>
              <p>7. üìã <strong>–£–ø–∞–∫–æ–≤—â–∏–∫—É:</strong> –£–ø–∞–∫–æ–≤–∫–∞ –∏ –æ—Ç–≥—Ä—É–∑–∫–∞</p>
            </div>
          </div>

          {/* Material Availability Check */}
          <div className="bg-green-50 rounded-lg p-4">
            <h3 className="font-medium text-green-900 mb-2">üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p className="text-green-700">
                  <strong>–¢–∫–∞–Ω—å:</strong> {fabricMaterial ? `${fabricMaterial.stockQuantity} ${fabricMaterial.unit}` : '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}
                </p>
                <p className="text-green-600">
                  –¶–µ–Ω–∞: {fabricMaterial ? `${fabricMaterial.pricePerUnit} —Å–æ–º/${fabricMaterial.unit}` : 'N/A'}
                </p>
              </div>
              <div>
                <p className="text-green-700">
                  <strong>–§—É—Ä–Ω–∏—Ç—É—Ä–∞:</strong> {accessoryMaterial ? `${accessoryMaterial.stockQuantity} ${accessoryMaterial.unit}` : '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}
                </p>
                <p className="text-green-600">
                  –¶–µ–Ω–∞: {accessoryMaterial ? `${accessoryMaterial.pricePerUnit} —Å–æ–º/${accessoryMaterial.unit}` : 'N/A'}
                </p>
              </div>
            </div>
          </div>

          {/* Form Actions */}
          <div className="flex justify-end space-x-3 pt-6 border-t">
            <button
              type="button"
              onClick={onClose}
              className="px-6 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center"
            >
              <SafeIcon icon={FiPlus} className="w-4 h-4 mr-2" />
              –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ + –∑–∞–¥–∞—á–∏
            </button>
          </div>
        </form>
      </motion.div>
    </motion.div>
  );
};

export default QuickOrderForm;